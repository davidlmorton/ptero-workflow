[tox]
minversion = 1.6
envlist = py27

[base]
setenv =
    PBR_VERSION={env:PBR_VERSION:0.0.1}
    PYTHONPATH=.
    PYTHONUNBUFFERED=1
    PTERO_PETRI_AMQP_PORT=6999
    PTERO_PETRI_CELERY_REDIS_PORT=6997
    PTERO_PETRI_CELERY_BROKER_URL=amqp://localhost:6999
    PTERO_PETRI_CELERY_RESULT_BACKEND=redis://localhost:6997
    PTERO_PETRI_HOME={env:PTERO_PETRI_HOME:../petri}
    PTERO_PETRI_HOST=localhost
    PTERO_PETRI_PORT=6000
    PTERO_PETRI_REDIS_HOST=localhost
    PTERO_PETRI_REDIS_PORT=6998
    PTERO_PETRI_LOG_LEVEL=INFO
    PTERO_PETRI_LOG_WITH_TIMESTAMPS=0
    PTERO_SHELL_COMMAND_CELERY_BROKER_URL=amqp://localhost:5999
    PTERO_SHELL_COMMAND_CELERY_RESULT_BACKEND=redis://localhost:5998
    PTERO_SHELL_COMMAND_HOME={env:PTERO_SHELL_COMMAND_HOME:../shell-command}
    PTERO_SHELL_COMMAND_HOST=localhost
    PTERO_SHELL_COMMAND_LOG_LEVEL=INFO
    PTERO_SHELL_COMMAND_LOG_WITH_TIMESTAMPS=0
    PTERO_SHELL_COMMAND_PORT=5000
    PTERO_SHELL_COMMAND_RABBITMQ_LOG_BASE=var/log/shell-command
    PTERO_SHELL_COMMAND_RABBITMQ_MNESIA_BASE=var/rabbitmq-data/shell-command
    PTERO_SHELL_COMMAND_RABBITMQ_NODENAME=ptero-shell-command-rabbitmq
    PTERO_SHELL_COMMAND_RABBITMQ_NODE_PORT=5999
    PTERO_SHELL_COMMAND_REDIS_PORT=5998
    PTERO_WORKFLOW_AMQP_PORT=7999
    PTERO_WORKFLOW_CELERY_REDIS_PORT=7998
    PTERO_WORKFLOW_CELERY_BROKER_URL=amqp://localhost:7999
    PTERO_WORKFLOW_CELERY_RESULT_BACKEND=redis://localhost:7998
    PTERO_WORKFLOW_RABBITMQ_LOG_BASE=var/log/workflow
    PTERO_WORKFLOW_RABBITMQ_MNESIA_BASE=var/rabbitmq-data/workflow
    PTERO_WORKFLOW_RABBITMQ_NODENAME=ptero-workflow-rabbitmq
    PTERO_WORKFLOW_RABBITMQ_NODE_PORT=7999
    PTERO_WORKFLOW_REDIS_PORT=7998
    PTERO_WORKFLOW_TEST_SCRIPTS_DIR={toxinidir}/tests/scripts
    PTERO_WORKFLOW_DB_STRING={env:PTERO_WORKFLOW_DB_STRING:sqlite:///var/workflow.sqlite}
    PTERO_WORKFLOW_HOST=localhost
    PTERO_WORKFLOW_PORT=7000
    PTERO_WORKFLOW_LOG_LEVEL=INFO
    PTERO_WORKFLOW_LOG_WITH_TIMESTAMPS=0
whitelist_externals =
    rm
    find
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt

[testenv:dev]
setenv =
    {[base]setenv}
deps =
    {[base]deps}
whitelist_externals =
    {[base]whitelist_externals}
commands =
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    {toxinidir}/devserver {posargs}

[testenv:dev-noenv]
setenv =
deps =
    {[base]deps}
whitelist_externals =
    {[base]whitelist_externals}
commands =
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    {toxinidir}/devserver {posargs}


[testenv]
usedevelop=True
setenv =
    {[base]setenv}
    PTERO_WORKFLOW_LOG_LEVEL=DEBUG
deps =
    {[base]deps}
whitelist_externals =
    {[base]whitelist_externals}
    bash
commands =
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    coverage combine
    coverage erase
    bash -c '{toxinidir}/devserver --num-workers 1 --logdir {toxinidir}/var/log --pidfile {toxinidir}/var/run/devserver.pid &'
    {toxinidir}/tests/scripts/run_tests
    bash -c 'PID=$(cat {toxinidir}/var/run/devserver.pid); kill $PID; while ps -p $PID >/dev/null; do sleep 1; done'
    coverage combine
