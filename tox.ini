[tox]
minversion = 2.0
envlist = py27

[testenv]
passenv = *
usedevelop=True
setenv =
    PTERO_PETRI_CELERY_BROKER_URL={env:PTERO_PETRI_CELERY_BROKER_URL:amqp://localhost:6999}
    PTERO_PETRI_CELERY_RESULT_BACKEND={env:PTERO_PETRI_CELERY_RESULT_BACKEND:amqp://localhost:6999}
    PTERO_PETRI_HOME={env:PTERO_PETRI_HOME:../petri}
    PTERO_PETRI_HOST={env:PTERO_PETRI_HOST:localhost}
    PTERO_PETRI_LOG_LEVEL={env:PTERO_PETRI_LOG_LEVEL:INFO}
    PTERO_PETRI_LOG_WITH_TIMESTAMPS={env:PTERO_PETRI_LOG_WITH_TIMESTAMPS:0}
    PTERO_PETRI_PORT={env:PTERO_PETRI_PORT:6001}
    PTERO_PETRI_RABBITMQ_NODE_PORT={env:PTERO_PETRI_RABBITMQ_NODE_PORT:6999}
    PTERO_PETRI_NET_REDIS_DEFAULT_TTL={env:PTERO_PETRI_NET_REDIS_DEFAULT_TTL:3600}
    PTERO_PETRI_NET_REDIS_HOST={env:PTERO_PETRI_NET_REDIS_HOST:localhost}
    PTERO_PETRI_NET_REDIS_PORT={env:PTERO_PETRI_NET_REDIS_PORT:6998}
    PTERO_SHELL_COMMAND_CELERY_BROKER_URL={env:PTERO_SHELL_COMMAND_CELERY_BROKER_URL:amqp://localhost:5999}
    PTERO_SHELL_COMMAND_CELERY_RESULT_BACKEND={env:PTERO_SHELL_COMMAND_CELERY_RESULT_BACKEND:amqp://localhost:5999}
    PTERO_SHELL_COMMAND_HOME={env:PTERO_SHELL_COMMAND_HOME:../shell-command}
    PTERO_SHELL_COMMAND_HOST={env:PTERO_SHELL_COMMAND_HOST:localhost}
    PTERO_SHELL_COMMAND_LOG_LEVEL={env:PTERO_SHELL_COMMAND_LOG_LEVEL:INFO}
    PTERO_SHELL_COMMAND_LOG_WITH_TIMESTAMPS={env:PTERO_SHELL_COMMAND_LOG_WITH_TIMESTAMPS:0}
    PTERO_SHELL_COMMAND_PORT={env:PTERO_SHELL_COMMAND_PORT:5000}
    PTERO_SHELL_COMMAND_RABBITMQ_LOG_BASE={env:PTERO_SHELL_COMMAND_RABBITMQ_LOG_BASE:var/log/shell-command}
    PTERO_SHELL_COMMAND_RABBITMQ_MNESIA_BASE={env:PTERO_SHELL_COMMAND_RABBITMQ_MNESIA_BASE:var/rabbitmq-data/shell-command}
    PTERO_SHELL_COMMAND_RABBITMQ_NODENAME={env:PTERO_SHELL_COMMAND_RABBITMQ_NODENAME:ptero-shell-command-rabbitmq}
    PTERO_SHELL_COMMAND_RABBITMQ_NODE_PORT={env:PTERO_SHELL_COMMAND_RABBITMQ_NODE_PORT:5999}
    PTERO_WORKFLOW_CELERYD_PREFETCH_MULTIPLIER={env:PTERO_WORKFLOW_CELERYD_PREFETCH_MULTIPLIER:1}
    PTERO_WORKFLOW_CELERY_BROKER_URL={env:PTERO_WORKFLOW_CELERY_BROKER_URL:amqp://localhost:7999}
    PTERO_WORKFLOW_CELERY_BROKER_HEARTBEAT={env:PTERO_WORKFLOW_CELERY_BROKER_HEARTBEAT:300}
    PTERO_WORKFLOW_CELERY_BROKER_HEARTBEAT_CHECKRATE={env:PTERO_WORKFLOW_CELERY_BROKER_HEARTBEAT_CHECKRATE:5}
    PTERO_WORKFLOW_CELERY_RESULT_BACKEND={env:PTERO_WORKFLOW_CELERY_RESULT_BACKEND:amqp://localhost:7999}
    PTERO_WORKFLOW_DB_STRING={env:PTERO_WORKFLOW_DB_STRING:postgres://postgres@localhost/ptero_workflow}
    PTERO_WORKFLOW_HOST={env:PTERO_WORKFLOW_HOST:localhost}
    PTERO_WORKFLOW_LOG_LEVEL={env:PTERO_WORKFLOW_LOG_LEVEL:DEBUG}
    PTERO_WORKFLOW_LOG_WITH_TIMESTAMPS={env:PTERO_WORKFLOW_LOG_WITH_TIMESTAMPS:0}
    PTERO_WORKFLOW_PORT={env:PTERO_WORKFLOW_PORT:7000}
    PTERO_WORKFLOW_RABBITMQ_LOG_BASE={env:PTERO_WORKFLOW_RABBITMQ_LOG_BASE:var/log/workflow}
    PTERO_WORKFLOW_RABBITMQ_MNESIA_BASE={env:PTERO_WORKFLOW_RABBITMQ_MNESIA_BASE:var/rabbitmq-data/workflow}
    PTERO_WORKFLOW_RABBITMQ_NODENAME={env:PTERO_WORKFLOW_RABBITMQ_NODENAME:ptero-workflow-rabbitmq}
    PTERO_WORKFLOW_RABBITMQ_NODE_PORT={env:PTERO_WORKFLOW_RABBITMQ_NODE_PORT:7999}
    PTERO_WORKFLOW_TEST_NUM_SHELL_COMMAND_WORKERS={env:PTERO_WORKFLOW_TEST_NUM_SHELL_COMMAND_WORKERS:2}
    PTERO_WORKFLOW_TEST_SCRIPTS_DIR={toxinidir}/tests/scripts
    PYTHONUNBUFFERED={env:PYTHONUNBUFFERED:1}
whitelist_externals =
    rm
    find
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt
commands =
    teardown_devserver {toxinidir}/var/run/devserver.pid
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    coverage combine
    coverage erase
    {toxinidir}/scripts/purge-backends --force --postgres
    devserver --procfile {toxinidir}/tests/scripts/Procfile --logdir {toxinidir}/var/log --daemondir {toxinidir}/var/run
    wait_for_service PTERO_PETRI_HOST PTERO_PETRI_PORT
    wait_for_service PTERO_SHELL_COMMAND_HOST PTERO_SHELL_COMMAND_PORT
    wait_for_service PTERO_WORKFLOW_HOST PTERO_WORKFLOW_RABBITMQ_NODE_PORT
    {toxinidir}/tests/scripts/run_tests {posargs}
    {toxinidir}/tests/scripts/ensure_db_is_empty
    teardown_devserver {toxinidir}/var/run/devserver.pid
    coverage combine
    coverage report
    flake8

[testenv:keep-db]
passenv = *
commands =
    teardown_devserver {toxinidir}/var/run/devserver.pid
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    coverage combine
    coverage erase
    devserver --procfile {toxinidir}/tests/scripts/Procfile --logdir {toxinidir}/var/log --daemondir {toxinidir}/var/run
    wait_for_service PTERO_PETRI_HOST PTERO_PETRI_PORT
    wait_for_service PTERO_SHELL_COMMAND_HOST PTERO_SHELL_COMMAND_PORT
    wait_for_service PTERO_WORKFLOW_HOST PTERO_WORKFLOW_RABBITMQ_NODE_PORT
    {toxinidir}/tests/scripts/run_tests {posargs}
    teardown_devserver {toxinidir}/var/run/devserver.pid
    coverage combine
    flake8 {toxinidir}/ptero_workflow

[testenv:dev]
passenv = *
commands =
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    devserver --procfile {toxinidir}/tests/scripts/Procfile {posargs}

[testenv:dev-all-in-one]
passenv = *
setenv =
    {[testenv]setenv}
    PTERO_ALLOW_JANITORS=1
    PTERO_LSF_HOME={env:PTERO_LSF_HOME:../lsf}
    PTERO_LSF_HOST={env:PTERO_LSF_HOST:localhost}
    PTERO_LSF_PORT={env:PTERO_LSF_PORT:8000}
whitelist_externals =
    {[testenv]whitelist_externals}
    sudo
commands =
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    sudo rabbitmq-plugins disable rabbitmq_management
    {toxinidir}/scripts/purge-backends --postgres
    devserver --procfile {toxinidir}/tests/scripts/Procfile-for-lsf-with-backing-services {posargs}

[testenv:dev-noenv]
passenv = *
commands =
    find {toxinidir}/ptero_workflow -name '*.pyc' -delete
    rm -rf {toxinidir}/var
    {toxinidir}/scripts/purge-backends --force --postgres
    devserver --procfile {toxinidir}/tests/scripts/Procfile {posargs}

[testenv:alembic]
passenv = *
commands =
    {envbindir}/alembic {posargs}

[testenv:tests-only]
passenv = *
commands =
    {envbindir}/nosetests {posargs}

[testenv:ipython]
passenv = *
whitelist_externals =
    ipython
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt
    ipython
commands =
    ipython

[flake8]
max-line-length = 80
exclude = *.egg,ptero_workflow/alembic/versions/*
max-complexity = 8
ignore = E12,E131,E201,E202,E203,E221,E225,E226,E231,E303,E501,E502,E703,F811,F841,W291
