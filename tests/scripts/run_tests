#!/usr/bin/env bash
set -e
set -o pipefail
set -o nounset

trap 'exit 1' SIGINT SIGTERM

readonly LOG_BASE=var/log
readonly HONCHO_LOG=${LOG_BASE}/honcho.out
declare DEVSERVER_PID
EXIT_CODE=0

REGEX=${1:-}
if [[ -z "$REGEX" ]]; then
    REGEX="test"
fi
echo "Looking for tests matching this regex: $REGEX"


function collect_test_names_dry_run() {
  local FAILURES=$(nosetests --collect-only -v 2>&1 |grep '^Failure:')
  if ! test -z "${FAILURES}"; then
      echo "Failed to collect tests to run:"
      echo "$FAILURES"
      exit 1
  fi
}

function capture_test_log() {
  local INITIAL_LOG_LENGTH=$1
  local LOG_OUTPUT_FILE=$2
  local FINAL_LOG_LENGTH=$(wc -l ${HONCHO_LOG}|awk '{ print $1 }')
  tail -n $(expr ${FINAL_LOG_LENGTH} - ${INITIAL_LOG_LENGTH}) ${HONCHO_LOG} \
      > ${LOG_OUTPUT_FILE}
}

function collect_test_names() {
  echo "$(nosetests --collect-only -v 2>&1 |grep 'test_'|cut -d\( -f2|cut -d\) -f1 |grep $REGEX)"
}

function collect_number_of_tests() {
  echo "$(collect_test_names)" | wc -l
}

function collect_number_of_unique_tests() {
  echo "$(collect_test_names | uniq)" | wc -l
}

function run_tests() {
  echo "Found $(collect_number_of_tests) tests in $(collect_number_of_unique_tests) test classes to run"

  local FAIL_LOG_DIR=${LOG_BASE}/fail
  mkdir ${FAIL_LOG_DIR}

  local TEST_NAMES=$(collect_test_names | uniq)
  for TEST_NAME in ${TEST_NAMES}; do
    local INITIAL_LOG_LENGTH=$(wc -l ${HONCHO_LOG}|awk '{ print $1 }')
    local NOSE_TEST_NAME=$(                     \
        perl -e '$ARGV[0] =~ s/\.([^.]+)$/:$1/; \
        print $ARGV[0]' ${TEST_NAME})

    printf "%s ... " ${NOSE_TEST_NAME}

    local LOG_OUTPUT_FILE=${LOG_BASE}/${TEST_NAME}.log
    local TEST_OUTPUT_FILE=${LOG_BASE}/${TEST_NAME}.test
    if coverage run $(which nosetests) -q ${NOSE_TEST_NAME} 2> ${TEST_OUTPUT_FILE}; then
      printf "OK\n"
      capture_test_log ${INITIAL_LOG_LENGTH} ${LOG_OUTPUT_FILE}
    else
      capture_test_log ${INITIAL_LOG_LENGTH} ${LOG_OUTPUT_FILE}
      printf "FAIL\n"
      cp ${LOG_OUTPUT_FILE} ${FAIL_LOG_DIR}
      cp ${TEST_OUTPUT_FILE} ${FAIL_LOG_DIR}
      EXIT_CODE=1
    fi

  done
}

collect_test_names_dry_run
run_tests
exit $EXIT_CODE
